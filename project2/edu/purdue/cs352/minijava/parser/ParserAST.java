/* ParserAST.java */
/* Generated By:JavaCC: Do not edit this line. ParserAST.java */
    package edu.purdue.cs352.minijava.parser;
    import edu.purdue.cs352.minijava.ast.*;
    import java.util.*;

    public class ParserAST implements ParserASTConstants {
        public static void main(String[] args) {
            ParserAST parser;

            if (args.length != 1) {
                System.out.println("Use: mjparse-ast <input file>");
                return;
            }

            try {
                parser = new ParserAST(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException ex) {
                System.out.println("File " + args[0] + " not found.");
                return;
            }

            try {
                parser.Program();
            } catch (ParseException ex) {
                System.out.println(ex.getMessage());
                return;
            }
        }

/* The following is a simple grammar that will allow you to test the generated
 * lexer. */
  final public List<Token> TokenList() throws ParseException {Token t;
    List<Token> tl = new ArrayList<Token>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_CLASS:
      case KW_PUBLIC:
      case KW_STATIC:
      case KW_VOID:
      case KW_MAIN:
      case KW_STRING:
      case KW_EXTENDS:
      case KW_RETURN:
      case KW_INT:
      case KW_BOOLEAN:
      case KW_IF:
      case KW_ELSE:
      case KW_WHILE:
      case KW_TRUE:
      case KW_FALSE:
      case KW_THIS:
      case KW_NEW:
      case KW_SYSPRNT:
      case SYM_LBRACE:
      case SYM_RBRACE:
      case SYM_LPAREN:
      case SYM_RPAREN:
      case SYM_LBRACK:
      case SYM_RBRACK:
      case SYM_SEMICOL:
      case SYM_EQ:
      case SYM_LOGAND:
      case SYM_LOGOR:
      case SYM_LESS:
      case SYM_LESSEQ:
      case SYM_EQEQ:
      case SYM_NOTEQ:
      case SYM_GREAT:
      case SYM_GREATEQ:
      case SYM_PLUS:
      case SYM_MINUS:
      case SYM_MULTIL:
      case SYM_DIVIDE:
      case SYM_MOD:
      case SYM_NOT:
      case SYM_DOT:
      case SYM_COMMA:
      case IDENTIFIER:
      case INT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      t = Token();
tl.add(t);
    }
    jj_consume_token(0);
{if ("" != null) return tl;}
    throw new Error("Missing return statement in function");
  }

  final public Token Token() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KW_CLASS:{
      jj_consume_token(KW_CLASS);
      break;
      }
    case KW_PUBLIC:{
      jj_consume_token(KW_PUBLIC);
      break;
      }
    case KW_STATIC:{
      jj_consume_token(KW_STATIC);
      break;
      }
    case KW_VOID:{
      jj_consume_token(KW_VOID);
      break;
      }
    case KW_MAIN:{
      jj_consume_token(KW_MAIN);
      break;
      }
    case KW_STRING:{
      jj_consume_token(KW_STRING);
      break;
      }
    case KW_EXTENDS:{
      jj_consume_token(KW_EXTENDS);
      break;
      }
    case KW_RETURN:{
      jj_consume_token(KW_RETURN);
      break;
      }
    case KW_INT:{
      jj_consume_token(KW_INT);
      break;
      }
    case KW_BOOLEAN:{
      jj_consume_token(KW_BOOLEAN);
      break;
      }
    case KW_IF:{
      jj_consume_token(KW_IF);
      break;
      }
    case KW_ELSE:{
      jj_consume_token(KW_ELSE);
      break;
      }
    case KW_WHILE:{
      jj_consume_token(KW_WHILE);
      break;
      }
    case KW_TRUE:{
      jj_consume_token(KW_TRUE);
      break;
      }
    case KW_FALSE:{
      jj_consume_token(KW_FALSE);
      break;
      }
    case KW_THIS:{
      jj_consume_token(KW_THIS);
      break;
      }
    case KW_NEW:{
      jj_consume_token(KW_NEW);
      break;
      }
    case KW_SYSPRNT:{
      jj_consume_token(KW_SYSPRNT);
      break;
      }
    case SYM_LBRACE:{
      jj_consume_token(SYM_LBRACE);
      break;
      }
    case SYM_RBRACE:{
      jj_consume_token(SYM_RBRACE);
      break;
      }
    case SYM_LPAREN:{
      jj_consume_token(SYM_LPAREN);
      break;
      }
    case SYM_RPAREN:{
      jj_consume_token(SYM_RPAREN);
      break;
      }
    case SYM_LBRACK:{
      jj_consume_token(SYM_LBRACK);
      break;
      }
    case SYM_RBRACK:{
      jj_consume_token(SYM_RBRACK);
      break;
      }
    case SYM_SEMICOL:{
      jj_consume_token(SYM_SEMICOL);
      break;
      }
    case SYM_EQ:{
      jj_consume_token(SYM_EQ);
      break;
      }
    case SYM_LOGAND:{
      jj_consume_token(SYM_LOGAND);
      break;
      }
    case SYM_LOGOR:{
      jj_consume_token(SYM_LOGOR);
      break;
      }
    case SYM_LESS:{
      jj_consume_token(SYM_LESS);
      break;
      }
    case SYM_LESSEQ:{
      jj_consume_token(SYM_LESSEQ);
      break;
      }
    case SYM_EQEQ:{
      jj_consume_token(SYM_EQEQ);
      break;
      }
    case SYM_NOTEQ:{
      jj_consume_token(SYM_NOTEQ);
      break;
      }
    case SYM_GREAT:{
      jj_consume_token(SYM_GREAT);
      break;
      }
    case SYM_GREATEQ:{
      jj_consume_token(SYM_GREATEQ);
      break;
      }
    case SYM_PLUS:{
      jj_consume_token(SYM_PLUS);
      break;
      }
    case SYM_MINUS:{
      jj_consume_token(SYM_MINUS);
      break;
      }
    case SYM_MULTIL:{
      jj_consume_token(SYM_MULTIL);
      break;
      }
    case SYM_DIVIDE:{
      jj_consume_token(SYM_DIVIDE);
      break;
      }
    case SYM_MOD:{
      jj_consume_token(SYM_MOD);
      break;
      }
    case SYM_NOT:{
      jj_consume_token(SYM_NOT);
      break;
      }
    case SYM_DOT:{
      jj_consume_token(SYM_DOT);
      break;
      }
    case SYM_COMMA:{
      jj_consume_token(SYM_COMMA);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case INT_LITERAL:{
      jj_consume_token(INT_LITERAL);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

// Grammar
  final public Program Program() throws ParseException {Main main;
    Token tok;
    List<ClassDecl> cds = new ArrayList<ClassDecl>();
    ClassDecl cd;
    main = MainClass();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_CLASS:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      cd = ClassDeclaration();
cds.add(cd);
    }
    jj_consume_token(0);
{if ("" != null) return new Program(token, main, cds);}
    throw new Error("Missing return statement in function");
  }

  final public Main MainClass() throws ParseException {Statement state;
    Token tok;
    jj_consume_token(KW_CLASS);
    tok = Identifier();
    jj_consume_token(SYM_LBRACE);
    jj_consume_token(KW_PUBLIC);
    jj_consume_token(KW_STATIC);
    jj_consume_token(KW_VOID);
    jj_consume_token(KW_MAIN);
    jj_consume_token(SYM_LPAREN);
    jj_consume_token(KW_STRING);
    jj_consume_token(SYM_LBRACK);
    jj_consume_token(SYM_RBRACK);
    Identifier();
    jj_consume_token(SYM_RPAREN);
    jj_consume_token(SYM_LBRACE);
    state = Statement();
    jj_consume_token(SYM_RBRACE);
    jj_consume_token(SYM_RBRACE);
{if ("" != null) return new Main(tok, state);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDeclaration() throws ParseException {List<VarDecl> fields = new ArrayList<VarDecl>();
    VarDecl field;
    List<MethodDecl> methods = new ArrayList<MethodDecl>();
    MethodDecl method;
    Token tok, eggstends = null;
    String eggs = null;
    jj_consume_token(KW_CLASS);
    tok = Identifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KW_EXTENDS:{
      jj_consume_token(KW_EXTENDS);
      eggstends = Identifier();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(SYM_LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_INT:
      case KW_BOOLEAN:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      field = VarDeclaration();
fields.add(field);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      method = MethodDeclaration();
methods.add(method);
    }
    jj_consume_token(SYM_RBRACE);
if(eggstends != null)
            eggs = eggstends.toString();
        {if ("" != null) return new ClassDecl(tok, tok.toString() , eggs, fields, methods);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDeclaration() throws ParseException {Type type;
    Token tok;
    type = Type();
    tok = Identifier();
    jj_consume_token(SYM_SEMICOL);
{if ("" != null) return new VarDecl(tok, type, tok.toString());}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDeclaration() throws ParseException {Type retType, args;
    List<Parameter> parameters = new ArrayList<Parameter>();
    List<VarDecl> vds = new ArrayList<VarDecl>();
    List<Statement> body = new ArrayList<Statement>();
    Exp retExp;
    Token tok, argsTok;
    Statement stat;
    VarDecl vd;
    jj_consume_token(KW_PUBLIC);
    retType = Type();
    tok = Identifier();
    jj_consume_token(SYM_LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KW_INT:
    case KW_BOOLEAN:
    case IDENTIFIER:{
      args = Type();
      argsTok = Identifier();
parameters.add(new Parameter(argsTok, args, argsTok.image));
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYM_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(SYM_COMMA);
        args = Type();
        argsTok = Identifier();
parameters.add(new Parameter(argsTok, args, argsTok.image));
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(SYM_RPAREN);
    jj_consume_token(SYM_LBRACE);
    label_6:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
      vd = VarDeclaration();
vds.add(vd);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_IF:
      case KW_WHILE:
      case KW_TRUE:
      case KW_FALSE:
      case KW_THIS:
      case KW_NEW:
      case KW_SYSPRNT:
      case SYM_LBRACE:
      case SYM_LPAREN:
      case SYM_NOT:
      case IDENTIFIER:
      case INT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      stat = Statement();
body.add(stat);
    }
    jj_consume_token(KW_RETURN);
    retExp = Expression();
    jj_consume_token(SYM_SEMICOL);
    jj_consume_token(SYM_RBRACE);
{if ("" != null) return new MethodDecl(tok, retType, tok.toString(), parameters, vds, body, retExp);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KW_INT:{
      jj_consume_token(KW_INT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_LBRACK:{
        jj_consume_token(SYM_LBRACK);
        jj_consume_token(SYM_RBRACK);
{if ("" != null) return new TypeIntArray(token);}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
{if ("" != null) return new TypeInt(token);}
      break;
      }
    case KW_BOOLEAN:{
      jj_consume_token(KW_BOOLEAN);
{if ("" != null) return new TypeBoolean(token);}
      break;
      }
    case IDENTIFIER:{
      Identifier();
{if ("" != null) return new Type(token, token.toString());}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {List<Statement> body = new ArrayList<Statement>();
    Statement stat;
    Exp condition;
    Statement ifPart, elsePart = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_LBRACE:{
      jj_consume_token(SYM_LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KW_IF:
        case KW_WHILE:
        case KW_TRUE:
        case KW_FALSE:
        case KW_THIS:
        case KW_NEW:
        case KW_SYSPRNT:
        case SYM_LBRACE:
        case SYM_LPAREN:
        case SYM_NOT:
        case IDENTIFIER:
        case INT_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        stat = Statement();
body.add(stat);
      }
      jj_consume_token(SYM_RBRACE);
{if ("" != null) return new BlockStatement(token, body);}
      break;
      }
    case KW_IF:{
      jj_consume_token(KW_IF);
      jj_consume_token(SYM_LPAREN);
      condition = Expression();
      jj_consume_token(SYM_RPAREN);
      ifPart = Statement();
      if (jj_2_2(2)) {
        jj_consume_token(KW_ELSE);
        elsePart = Statement();
      } else {
        ;
      }
{if ("" != null) return new IfStatement(token, condition, ifPart, elsePart);}
      break;
      }
    case KW_WHILE:{
      jj_consume_token(KW_WHILE);
      jj_consume_token(SYM_LPAREN);
      condition = Expression();
      jj_consume_token(SYM_RPAREN);
      stat = Statement();
{if ("" != null) return new WhileStatement(token, condition, stat);}
      break;
      }
    case KW_SYSPRNT:{
      jj_consume_token(KW_SYSPRNT);
      jj_consume_token(SYM_LPAREN);
      condition = Expression();
      jj_consume_token(SYM_RPAREN);
      jj_consume_token(SYM_SEMICOL);
{if ("" != null) return new PrintStatement(token, condition);}
      break;
      }
    case KW_TRUE:
    case KW_FALSE:
    case KW_THIS:
    case KW_NEW:
    case SYM_LPAREN:
    case SYM_NOT:
    case IDENTIFIER:
    case INT_LITERAL:{
      condition = Expression();
      jj_consume_token(SYM_SEMICOL);
{if ("" != null) return new ExpStatement(token, condition);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Expression() throws ParseException {Exp expr;
    expr = AssignExpr();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Exp AssignExpr() throws ParseException {Exp target, value;
    target = LogicOp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_EQ:{
      jj_consume_token(SYM_EQ);
      value = AssignExpr();
{if ("" != null) return new AssignExp(token, target, value);}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return target;}
    throw new Error("Missing return statement in function");
  }

  final public Exp LogicOp() throws ParseException {Exp left;
    left = CmpOp();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_LOGAND:
      case SYM_LOGOR:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      left = LogicOpP(left);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Exp LogicOpP(Exp left) throws ParseException {Exp right;
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_LOGAND:{
      tok = jj_consume_token(SYM_LOGAND);
      break;
      }
    case SYM_LOGOR:{
      tok = jj_consume_token(SYM_LOGOR);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = CmpOp();
{if ("" != null) return new BinaryExp(left, tok, right);}
    throw new Error("Missing return statement in function");
  }

  final public Exp CmpOp() throws ParseException {Exp left;
    left = AddOp();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_LESS:
      case SYM_LESSEQ:
      case SYM_EQEQ:
      case SYM_NOTEQ:
      case SYM_GREAT:
      case SYM_GREATEQ:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      left = CmpOpP(left);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Exp CmpOpP(Exp left) throws ParseException {Exp right;
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_LESS:{
      tok = jj_consume_token(SYM_LESS);
      break;
      }
    case SYM_LESSEQ:{
      tok = jj_consume_token(SYM_LESSEQ);
      break;
      }
    case SYM_EQEQ:{
      tok = jj_consume_token(SYM_EQEQ);
      break;
      }
    case SYM_NOTEQ:{
      tok = jj_consume_token(SYM_NOTEQ);
      break;
      }
    case SYM_GREAT:{
      tok = jj_consume_token(SYM_GREAT);
      break;
      }
    case SYM_GREATEQ:{
      tok = jj_consume_token(SYM_GREATEQ);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = AddOp();
{if ("" != null) return new BinaryExp(left, tok, right);}
    throw new Error("Missing return statement in function");
  }

  final public Exp AddOp() throws ParseException {Exp left, right;
    Token tok;
    left = MulOp();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_PLUS:
      case SYM_MINUS:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      left = AddOpP(left);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Exp AddOpP(Exp left) throws ParseException {Exp right;
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_PLUS:{
      tok = jj_consume_token(SYM_PLUS);
      break;
      }
    case SYM_MINUS:{
      tok = jj_consume_token(SYM_MINUS);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = MulOp();
{if ("" != null) return new BinaryExp(left, tok, right);}
    throw new Error("Missing return statement in function");
  }

  final public Exp MulOp() throws ParseException {Exp left, right;
    Token tok;
    left = UnaryOp();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_MULTIL:
      case SYM_DIVIDE:
      case SYM_MOD:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_12;
      }
      left = MulOpP(left);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Exp MulOpP(Exp left) throws ParseException {Exp right;
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_MULTIL:{
      tok = jj_consume_token(SYM_MULTIL);
      break;
      }
    case SYM_DIVIDE:{
      tok = jj_consume_token(SYM_DIVIDE);
      break;
      }
    case SYM_MOD:{
      tok = jj_consume_token(SYM_MOD);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = UnaryOp();
{if ("" != null) return new BinaryExp(left, tok, right);}
    throw new Error("Missing return statement in function");
  }

  final public Exp UnaryOp() throws ParseException {Exp left;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_NOT:{
      jj_consume_token(SYM_NOT);
      left = UnaryOp();
{if ("" != null) return new NotExp(token, left);}
      break;
      }
    case KW_TRUE:
    case KW_FALSE:
    case KW_THIS:
    case KW_NEW:
    case SYM_LPAREN:
    case IDENTIFIER:
    case INT_LITERAL:{
      left = PostfixOp();
{if ("" != null) return left;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp PostfixOp() throws ParseException {Exp left;
    left = PrimaryExp();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_LBRACK:
      case SYM_DOT:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
      left = PostfixOpP(left);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Exp PostfixOpP(Exp left) throws ParseException {Exp index, arg;
    List<Exp> arguments = new ArrayList<Exp>();
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYM_LBRACK:{
      jj_consume_token(SYM_LBRACK);
      index = Expression();
      jj_consume_token(SYM_RBRACK);
{if ("" != null) return new IndexExp(token, left, index );}
      break;
      }
    case SYM_DOT:{
      jj_consume_token(SYM_DOT);
      tok = Identifier();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYM_LPAREN:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_14;
        }
        jj_consume_token(SYM_LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KW_TRUE:
        case KW_FALSE:
        case KW_THIS:
        case KW_NEW:
        case SYM_LPAREN:
        case SYM_NOT:
        case IDENTIFIER:
        case INT_LITERAL:{
          arg = Expression();
arguments.add(arg);
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SYM_COMMA:{
              ;
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              break label_15;
            }
            jj_consume_token(SYM_COMMA);
            arg = Expression();
arguments.add(arg);
          }
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(SYM_RPAREN);
{if ("" != null) return new CallExp(token,left,tok.toString(), arguments);}
      }
{if ("" != null) return new MemberExp(token,left, tok.toString());}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp PrimaryExp() throws ParseException {Exp size;
    Token tok = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LITERAL:{
      tok = jj_consume_token(INT_LITERAL);
{if ("" != null) return new IntLiteralExp(token, Integer.parseInt(token.toString()));}
      break;
      }
    case KW_TRUE:{
      jj_consume_token(KW_TRUE);
{if ("" != null) return new BooleanLiteralExp(token, true);}
      break;
      }
    case KW_FALSE:{
      jj_consume_token(KW_FALSE);
{if ("" != null) return new BooleanLiteralExp(token, false);}
      break;
      }
    case IDENTIFIER:{
      Identifier();
{if ("" != null) return new VarExp(token, token.toString());}
      break;
      }
    case KW_THIS:{
      jj_consume_token(KW_THIS);
{if ("" != null) return new ThisExp(token);}
      break;
      }
    case KW_NEW:{
      jj_consume_token(KW_NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_INT:{
        jj_consume_token(KW_INT);
        jj_consume_token(SYM_LBRACK);
        size = Expression();
        jj_consume_token(SYM_RBRACK);
{if ("" != null) return new NewIntArrayExp(token, size);}
        break;
        }
      case IDENTIFIER:{
        tok = Identifier();
        jj_consume_token(SYM_LPAREN);
        jj_consume_token(SYM_RPAREN);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new NewObjectExp(tok, tok.toString());}
      break;
      }
    case SYM_LPAREN:{
      jj_consume_token(SYM_LPAREN);
      size = Expression();
      jj_consume_token(SYM_RPAREN);
{if ("" != null) return size;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(KW_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(KW_INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(SYM_NOT)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(SYM_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(KW_NEW)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(KW_THIS)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(KW_ELSE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(KW_FALSE)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(KW_TRUE)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(KW_SYSPRNT)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(KW_WHILE)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(KW_IF)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(SYM_LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(SYM_LBRACK)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserASTTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff00,0xffffff00,0x100,0x4000,0x30000,0x200,0x0,0x30000,0x17f40000,0x40000000,0x30000,0x17f40000,0x17f40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11e00000,0x40000000,0x10000000,0x0,0x11e00000,0x40000000,0x10000,0x11e00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffff,0xfffff,0x0,0x0,0x40000,0x0,0x20000,0x40000,0xc8000,0x0,0x40000,0xc8000,0xc8000,0x2,0xc,0xc,0x3f0,0x3f0,0xc00,0xc00,0x7000,0x7000,0xc8000,0x10000,0x0,0x20000,0xc8000,0x10000,0x40000,0xc0000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserAST(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserAST(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserAST(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserAST(ParserASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
