main:
 jal mj_main
 li $v0, 10
 syscall

minijavaNew:
 move $t0, $a0
 mul $a0, $a1, 4
 li $v0, 9
 syscall
 sw $t0, ($v0)
 j $ra

minijavaNewArray:
 move $t0, $a0
 mul $a0, $a0, 4
 add $a0, $a0, 4
 li $v0, 9
 syscall
 sw $t0, ($v0)
 j $ra

.data
.align 4
minijavaNewline:
 .asciiz "\n"

.text
minijavaPrint:
 li $v0, 1
 syscall
 la $a0, minijavaNewline
 li $v0, 4
 syscall
 j $ra

mj_main:
 add $sp, $sp, -4
 sw $fp, ($sp)
 move $fp, $sp
 add $sp, $sp, -16
 add $sp, $sp, -4
 sw $ra, ($sp)
 # a1: 0(1): NewObj *S :S
 sw $v0, -4($fp)
 sw $v1, -8($fp)
 sw $a0, -12($fp)
 la $a0, mj__v_S
 li $a1, 1
 jal minijavaNew
 move $a1, $v0
 lw $v0, -4($fp)
 lw $v1, -8($fp)
 lw $a0, -12($fp)
 # a0: 1(0): Int *3 :int
 li $a0, 3
 # a0: 2(0): Arg 1 *0 :int
 # a0: 3(0): Call 0 *simple(2) :int
 sw $v0, -4($fp)
 sw $v1, -8($fp)
 sw $a1, -12($fp)
 move $v0, $a1
 lw $v1, ($v0)
 lw $v1, 0($v1)
 jal $v1
 move $a0, $v0
 lw $v0, -4($fp)
 lw $v1, -8($fp)
 lw $a1, -12($fp)
 # a0: 4(0): Print 3 :void
 sw $v0, -4($fp)
 sw $v1, -8($fp)
 sw $a0, -12($fp)
 sw $a1, -16($fp)
 jal minijavaPrint
 lw $v0, -4($fp)
 lw $v1, -8($fp)
 lw $a0, -12($fp)
 lw $a1, -16($fp)
 .ret_mj_main:
 lw $ra, ($sp)
 add $sp, $sp, 4
 move $sp, $fp
 lw $fp, ($sp)
 add $sp, $sp, 4
 j $ra
.data
.align 4
mj__v_S:
 .word mj__m_S_simple
.text
mj__m_S_simple:
 add $sp, $sp, -4
 sw $fp, ($sp)
 move $fp, $sp
 add $sp, $sp, -16
 add $sp, $sp, -4
 sw $ra, ($sp)
 # a0: 5(0): Parameter *0 :int
 # a1: 6(1): VarAssg 5 *num :int
 move $a1, $a0
 # a0: 7(0): Label *lwhile_0_start :void
 .lwhile_0_start:
 # a0: 8(0): Int *1 :int
 li $a0, 1
 # a0: 9(0): Minus 6 8 :int
 sub $a0, $a1, $a0
 # a1: 10(1): VarAssg 9 *num :int
 move $a1, $a0
 # a0: 11(0): Int *0 :int
 li $a0, 0
 # a0: 12(0): Gt 10 11 :boolean
 sgt $a0, $a1, $a0 # a0: 13(0): NBranch 12 *lwhile_0_done :void
 beq $a0, $zero, .lwhile_0_done
 # a0: 14(0): Int *1 :int
 li $a0, 1
 # a1: 15(1): VarAssg 14 *num :int
 move $a1, $a0
 # a0: 16(0): Goto *lwhile_0_start :void
 j .lwhile_0_start
 # a0: 17(0): Label *lwhile_0_done :void
 .lwhile_0_done:
 # a1: 18(1): Unify 10 15 :int
 # a1: 19(1): Unify 6 18 :int
 # a0: 20(0): Return 19 :void
 move $v0, $a1
 j .ret_mj__m_S_simple
 .ret_mj__m_S_simple:
 lw $ra, ($sp)
 add $sp, $sp, 4
 move $sp, $fp
 lw $fp, ($sp)
 add $sp, $sp, 4
 j $ra

