/* Lexer.java */
/* Generated By:JavaCC: Do not edit this line. Lexer.java */
    package edu.purdue.cs352.minijava.parser;

    import java.util.*;

    public class Lexer implements LexerConstants {
        public static void main(String[] args) {
            Lexer lexer;
            List<Token> tl;

            if (args.length != 1) {
                System.out.println("Use: Lexer <input file>");
                return;
            }

            try {
                lexer = new Lexer(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException ex) {
                System.out.println("File " + args[0] + " not found.");
                return;
            }

            try {
                tl = lexer.TokenList();
            } catch (ParseException ex) {
                System.out.println(ex.getMessage());
                return;
            }

            for (Token tok : tl) {
                System.out.println(tok);
            }
        }

/* The following is a simple grammar that will allow you to test the generated
 * lexer. */
  final public List<Token> TokenList() throws ParseException {Token t;
    List<Token> tl = new ArrayList<Token>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_CLASS:
      case KW_PUBLIC:
      case KW_STATIC:
      case KW_VOID:
      case KW_MAIN:
      case KW_STRING:
      case KW_EXTENDS:
      case KW_RETURN:
      case KW_INT:
      case KW_BOOLEAN:
      case KW_IF:
      case KW_ELSE:
      case KW_WHILE:
      case KW_TRUE:
      case KW_FALSE:
      case KW_THIS:
      case KW_NEW:
      case KW_SYSPRNT:
      case SYM_LBRACE:
      case SYM_RBRACE:
      case SYM_LPAREN:
      case SYM_RPAREN:
      case SYM_LBRACK:
      case SYM_RBRACK:
      case SYM_SEMICOL:
      case SYM_EQ:
      case SYM_LOGAND:
      case SYM_LOGOR:
      case SYM_LESS:
      case SYM_LESSEQ:
      case SYM_EQEQ:
      case SYM_NOTEQ:
      case SYM_GREAT:
      case SYM_GREATEQ:
      case SYM_PLUS:
      case SYM_MINUS:
      case SYM_MULTIL:
      case SYM_DIVIDE:
      case SYM_MOD:
      case SYM_NOT:
      case SYM_DOT:
      case SYM_COMMA:
      case IDENTIFIER:
      case INT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      t = Token();
tl.add(t);
    }
    jj_consume_token(0);
{if ("" != null) return tl;}
    throw new Error("Missing return statement in function");
  }

  final public Token Token() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KW_CLASS:{
      jj_consume_token(KW_CLASS);
      break;
      }
    case KW_PUBLIC:{
      jj_consume_token(KW_PUBLIC);
      break;
      }
    case KW_STATIC:{
      jj_consume_token(KW_STATIC);
      break;
      }
    case KW_VOID:{
      jj_consume_token(KW_VOID);
      break;
      }
    case KW_MAIN:{
      jj_consume_token(KW_MAIN);
      break;
      }
    case KW_STRING:{
      jj_consume_token(KW_STRING);
      break;
      }
    case KW_EXTENDS:{
      jj_consume_token(KW_EXTENDS);
      break;
      }
    case KW_RETURN:{
      jj_consume_token(KW_RETURN);
      break;
      }
    case KW_INT:{
      jj_consume_token(KW_INT);
      break;
      }
    case KW_BOOLEAN:{
      jj_consume_token(KW_BOOLEAN);
      break;
      }
    case KW_IF:{
      jj_consume_token(KW_IF);
      break;
      }
    case KW_ELSE:{
      jj_consume_token(KW_ELSE);
      break;
      }
    case KW_WHILE:{
      jj_consume_token(KW_WHILE);
      break;
      }
    case KW_TRUE:{
      jj_consume_token(KW_TRUE);
      break;
      }
    case KW_FALSE:{
      jj_consume_token(KW_FALSE);
      break;
      }
    case KW_THIS:{
      jj_consume_token(KW_THIS);
      break;
      }
    case KW_NEW:{
      jj_consume_token(KW_NEW);
      break;
      }
    case KW_SYSPRNT:{
      jj_consume_token(KW_SYSPRNT);
      break;
      }
    case SYM_LBRACE:{
      jj_consume_token(SYM_LBRACE);
      break;
      }
    case SYM_RBRACE:{
      jj_consume_token(SYM_RBRACE);
      break;
      }
    case SYM_LPAREN:{
      jj_consume_token(SYM_LPAREN);
      break;
      }
    case SYM_RPAREN:{
      jj_consume_token(SYM_RPAREN);
      break;
      }
    case SYM_LBRACK:{
      jj_consume_token(SYM_LBRACK);
      break;
      }
    case SYM_RBRACK:{
      jj_consume_token(SYM_RBRACK);
      break;
      }
    case SYM_SEMICOL:{
      jj_consume_token(SYM_SEMICOL);
      break;
      }
    case SYM_EQ:{
      jj_consume_token(SYM_EQ);
      break;
      }
    case SYM_LOGAND:{
      jj_consume_token(SYM_LOGAND);
      break;
      }
    case SYM_LOGOR:{
      jj_consume_token(SYM_LOGOR);
      break;
      }
    case SYM_LESS:{
      jj_consume_token(SYM_LESS);
      break;
      }
    case SYM_LESSEQ:{
      jj_consume_token(SYM_LESSEQ);
      break;
      }
    case SYM_EQEQ:{
      jj_consume_token(SYM_EQEQ);
      break;
      }
    case SYM_NOTEQ:{
      jj_consume_token(SYM_NOTEQ);
      break;
      }
    case SYM_GREAT:{
      jj_consume_token(SYM_GREAT);
      break;
      }
    case SYM_GREATEQ:{
      jj_consume_token(SYM_GREATEQ);
      break;
      }
    case SYM_PLUS:{
      jj_consume_token(SYM_PLUS);
      break;
      }
    case SYM_MINUS:{
      jj_consume_token(SYM_MINUS);
      break;
      }
    case SYM_MULTIL:{
      jj_consume_token(SYM_MULTIL);
      break;
      }
    case SYM_DIVIDE:{
      jj_consume_token(SYM_DIVIDE);
      break;
      }
    case SYM_MOD:{
      jj_consume_token(SYM_MOD);
      break;
      }
    case SYM_NOT:{
      jj_consume_token(SYM_NOT);
      break;
      }
    case SYM_DOT:{
      jj_consume_token(SYM_DOT);
      break;
      }
    case SYM_COMMA:{
      jj_consume_token(SYM_COMMA);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case INT_LITERAL:{
      jj_consume_token(INT_LITERAL);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public LexerTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff00,0xffffff00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffff,0xfffff,};
   }

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
